----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    17:32:04 11/30/2018 
-- Design Name: 
-- Module Name:    DM - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity DM is
    Port ( WM : in  STD_LOGIC;
           RM : in  STD_LOGIC;
           WD : in  STD_LOGIC_VECTOR (15 downto 0);
           RD : out  STD_LOGIC_VECTOR (15 downto 0);
           Aluout : in  STD_LOGIC_VECTOR (15 downto 0);
           Ram1Data : inout  STD_LOGIC_VECTOR (15 downto 0);
           Ram1Addr : out  STD_LOGIC_VECTOR (17 downto 0);
           Ram1OE : out  STD_LOGIC;
           Ram1WE : out  STD_LOGIC;
           Ram1EN : out  STD_LOGIC;
           clk : in  STD_LOGIC;
           rst : in  STD_LOGIC);
end DM;

architecture Behavioral of DM is

begin
	Ram1WE_control: process(rst, clk, WM, RM, Aluout)
	begin
		if((rst = '1') or (RM = '1')) then
			Ram1WE <= '1';
		elsif(WM = '1') then
			Ram1WE <= clk;
		else
			Ram1WE <= '1';
		end if;
	end process;
		
	Ram1_control: process(rst, Aluout, WM, RM)
	begin
		if(rst = '1') then
			Ram1EN <= '0';
			Ram1OE <= '1';
			Ram1Addr <= (others => '0');
			Ram1Data <= (others => 'Z');		
		else
			Ram1Addr <= "00" & Aluout;
			if(WM = '1') then
				--写内存
				Ram1EN <= '0';
				Ram1OE <= '1';
				Ram1Data <= WD;
			elsif(RM = '1') then
				--读内存
				Ram1EN <= '0';
				Ram1OE <= '0';
				Ram1Data <= (others => 'Z');
			else
				--不应到达
				Ram1EN <= '0';
				Ram1OE <= '0';
				Ram1Data <= (others => 'Z');
			end if;
		end if;
	end process;
	
	Ram1_read : process(rst,Aluout,RM,WD,Ram1Data)
	begin
		RD <= Ram1Data;
	end process;

end Behavioral;

